package com.ty.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import com.ty.model.Account;
import com.ty.service.AccountService;


@Controller
@RequestMapping("/accounts")
public class AccountController {
	@Autowired
	private AccountService accountService;
	
	@GetMapping("/login")
	public String showLoginForm(@RequestParam(required = false) String error, Model model) {
	    if (error != null) {
	        model.addAttribute("error", "Invalid account number or PIN");
	    }
	    return "login";  
	}
	
	
    @PostMapping("/authenticate")
    public String authenticate(@RequestParam String accountNumber, @RequestParam String pin, Model model) {
        Account account = accountService.getAccountByNumber(accountNumber);
        if (account != null && account.getPin().equals(pin)) {  
            return "redirect:/accounts/dashboard?accountNumber=" + accountNumber;
            } else {
            model.addAttribute("error", "Invalid Account Number or PIN");
            return "login";  
        }
    }



	@GetMapping("/dashboard")
	public String showDashboard(Model model) {
	    model.addAttribute("account", new Account());  
	    return "dashboard";  
	}

	@PostMapping("/deposit")  
	public String deposit(@RequestParam String accountNumber, @RequestParam String pin, @RequestParam double amount, Model model) {
	    Account account = accountService.getAccountByNumber(accountNumber);
	    if (account != null && account.getPin().equals(pin)) { 
	        accountService.deposit(accountNumber, amount);
	        return "redirect:/accounts/dashboard";
	    }
	    model.addAttribute("error", "Invalid account number or PIN");
	    return "login";  
	}

	@GetMapping("/withdrawl")
	public String showWithdrawForm(Model model) {
	    model.addAttribute("account", new Account());  
	    return "dashboard";
	}

	@PostMapping("/withdraw")

	public String withdraw(@RequestParam String accountNumber, @RequestParam String pin, @RequestParam double amount, Model model) {
	    Account account = accountService.getAccountByNumber(accountNumber);
	    if (account != null && account.getPin().equals(pin)) { 
	        accountService.withdraw(accountNumber, amount);
	        return "redirect:/accounts/dashboard";
	    }
	    model.addAttribute("error", "Invalid account number or PIN");
	    return "login"; 
	}


}
